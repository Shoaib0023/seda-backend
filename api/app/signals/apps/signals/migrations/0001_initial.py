# Generated by Django 2.2.13 on 2020-09-10 04:42

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='History',
            fields=[
                ('identifier', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('when', models.DateTimeField(null=True)),
                ('what', models.CharField(max_length=255)),
                ('who', models.CharField(max_length=255, null=True)),
                ('extra', models.CharField(max_length=255, null=True)),
                ('description', models.TextField(max_length=3000)),
            ],
            options={
                'db_table': 'signals_history_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AreaType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('code', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(max_length=3000)),
            ],
            options={
                'verbose_name': 'Gebiedstype',
                'verbose_name_plural': 'Gebiedstypen',
            },
        ),
        migrations.CreateModel(
            name='Buurt',
            fields=[
                ('ogc_fid', models.IntegerField(primary_key=True, serialize=False)),
                ('id', models.CharField(max_length=14)),
                ('vollcode', models.CharField(max_length=4)),
                ('naam', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'buurt_simple',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=['name'])),
                ('name', models.CharField(max_length=255)),
                ('new_slug', models.CharField(blank=True, max_length=255, null=True)),
                ('category_level_name1', models.CharField(blank=True, max_length=255, null=True)),
                ('category_level_name2', models.CharField(blank=True, max_length=255, null=True)),
                ('category_level_name3', models.CharField(blank=True, max_length=255, null=True)),
                ('category_level_name4', models.CharField(blank=True, max_length=255, null=True)),
                ('filter_label', models.CharField(blank=True, max_length=255, null=True)),
                ('handling', models.CharField(choices=[('A3DMC', 'A3DMC'), ('A3DEC', 'A3DEC'), ('A3WMC', 'A3WMC'), ('A3WEC', 'A3WEC'), ('I5DMC', 'I5DMC'), ('STOPEC', 'STOPEC'), ('KLOKLICHTZC', 'KLOKLICHTZC'), ('GLADZC', 'GLADZC'), ('A3DEVOMC', 'A3DEVOMC'), ('WS1EC', 'WS1EC'), ('WS2EC', 'WS2EC'), ('WS3EC', 'WS3EC'), ('REST', 'REST'), ('ONDERMIJNING', 'ONDERMIJNING'), ('EMPTY', 'EMPTY'), ('LIGHTING', 'LIGHTING'), ('GLAD_OLIE', 'GLAD_OLIE'), ('TECHNISCHE_STORING', 'TECHNISCHE_STORING'), ('STOPEC3', 'STOPEC3'), ('URGENTE_MELDINGEN', 'URGENTE_MELDINGEN'), ('3WGM', '3WGM'), ('HANDLING_MARKTEN', 'HANDLING_MARKTEN')], default='REST', max_length=20)),
                ('handling_message', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ('name',),
                'permissions': (('sia_can_view_all_categories', 'Bekijk all categorieën (overschrijft categorie rechten van afdeling)'), ('sia_category_read', 'Inzien van categorieën'), ('sia_category_write', 'Wijzigen van categorieën')),
            },
        ),
        migrations.CreateModel(
            name='CategoryAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.EmailField(blank=True, max_length=254, null=True)),
                ('text', models.CharField(blank=True, max_length=10000, null=True)),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_id', models.CharField(blank=True, max_length=255, null=True)),
                ('city_name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='CityObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('orac_comment', models.CharField(max_length=200)),
                ('oracCode', models.CharField(max_length=100)),
                ('oracCategory', models.CharField(max_length=200)),
                ('oracType', models.CharField(max_length=200)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CityObjectAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.EmailField(blank=True, max_length=254, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_id', models.CharField(blank=True, max_length=255, null=True)),
                ('country_name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=3)),
                ('name', models.CharField(max_length=255)),
                ('is_intern', models.BooleanField(default=True)),
                ('city', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='signals.City')),
                ('country', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='signals.Country')),
            ],
            options={
                'ordering': ('name',),
                'permissions': (('sia_department_read', 'Inzien van afdeling instellingen'), ('sia_department_write', 'Wijzigen van afdeling instellingen')),
            },
        ),
        migrations.CreateModel(
            name='DirectingDepartments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.EmailField(blank=True, max_length=254, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('geometrie', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('stadsdeel', models.CharField(choices=[('A', 'Centrum'), ('B', 'Westpoort'), ('E', 'West'), ('M', 'Oost'), ('N', 'Noord'), ('T', 'Zuidoost'), ('K', 'Zuid'), ('F', 'Nieuw-West'), ('H', 'Het Amsterdamse Bos'), ('W', 'Weesp')], max_length=1, null=True)),
                ('buurt_code', models.CharField(max_length=4, null=True)),
                ('address', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('address_text', models.CharField(editable=False, max_length=256, null=True)),
                ('created_by', models.EmailField(blank=True, max_length=254, null=True)),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('bag_validated', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Priority',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High')], default='normal', max_length=10)),
                ('created_by', models.EmailField(blank=True, max_length=254, null=True)),
            ],
            options={
                'verbose_name_plural': 'Priorities',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=255)),
                ('field_type', models.CharField(choices=[('plain_text', 'PlainText'), ('text_input', 'TextInput'), ('multi_text_input', 'MultiTextInput'), ('checkbox_input', 'CheckboxInput'), ('radio_input', 'RadioInput'), ('select_input', 'SelectInput'), ('text_area_input', 'TextareaInput'), ('map_select', 'MapSelect')], default='plain_text', max_length=32)),
                ('meta', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict)),
                ('required', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'Questions',
            },
        ),
        migrations.CreateModel(
            name='Reporter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=17, null=True)),
                ('email_anonymized', models.BooleanField(default=False)),
                ('phone_anonymized', models.BooleanField(default=False)),
                ('sharing_allowed', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Signal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('finished_by', models.CharField(blank=True, max_length=200, null=True)),
                ('signal_id', models.UUIDField(db_index=True, default=uuid.uuid4)),
                ('source', models.CharField(default='online', max_length=128)),
                ('text', models.CharField(max_length=3000)),
                ('text_extra', models.CharField(blank=True, default='', max_length=10000)),
                ('incident_date_start', models.DateTimeField()),
                ('incident_date_end', models.DateTimeField(null=True)),
                ('operational_date', models.DateTimeField(null=True)),
                ('expire_date', models.DateTimeField(null=True)),
                ('upload', django.contrib.postgres.fields.ArrayField(base_field=models.FileField(upload_to='uploads/%Y/%m/%d/'), null=True, size=None)),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('categories', models.ManyToManyField(through='signals.CategoryAssignment', to='signals.Category')),
                ('category_assignment', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='signal', to='signals.CategoryAssignment')),
                ('city', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='signals.City')),
                ('city_object', models.ManyToManyField(blank=True, through='signals.CityObjectAssignment', to='signals.CityObject')),
                ('country', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='signals.Country')),
                ('directing_departments_assignment', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='signal', to='signals.DirectingDepartments')),
                ('location', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='signal', to='signals.Location')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='signals.Signal')),
                ('priority', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='signal', to='signals.Priority')),
                ('reporter', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='signal', to='signals.Reporter')),
            ],
            options={
                'ordering': ('created_at',),
                'permissions': (('sia_read', 'Leesrechten algemeen'), ('sia_write', 'Schrijfrechten algemeen'), ('sia_split', 'Splitsen van een melding'), ('sia_signal_create_initial', 'Melding aanmaken'), ('sia_signal_create_note', 'Notitie toevoegen bij een melding'), ('sia_signal_change_status', 'Wijzigen van status van een melding'), ('sia_signal_change_category', 'Wijzigen van categorie van een melding'), ('sia_signal_export', 'Meldingen exporteren'), ('sia_signal_report', 'Rapportage beheren')),
            },
        ),
        migrations.CreateModel(
            name='StoredSignalFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=10000)),
                ('created_by', models.EmailField(blank=True, max_length=254, null=True)),
                ('options', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('refresh', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('SIG', 'Signal'), ('REQ', 'Request'), ('QUE', 'Question'), ('COM', 'Complaint'), ('MAI', 'Maintenance')], default='SIG', max_length=3)),
                ('created_by', models.EmailField(blank=True, max_length=254, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('_signal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='types', to='signals.Signal')),
            ],
            options={
                'verbose_name_plural': 'Types',
                'ordering': ('_signal', '-created_at'),
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('text', models.CharField(blank=True, max_length=10000, null=True)),
                ('user', models.EmailField(blank=True, max_length=254, null=True)),
                ('target_api', models.CharField(blank=True, choices=[('sigmax', 'Sigmax (City Control)')], max_length=250, null=True)),
                ('state', models.CharField(blank=True, choices=[('m', 'Gemeld'), ('i', 'In afwachting van behandeling'), ('h', 'On hold'), ('o', 'Afgehandeld'), ('s', 'Gesplitst'), ('reopened', 'Heropend'), ('b', 'In behandeling'), ('ingepland', 'Ingepland'), ('ready to send', 'Te verzenden naar extern systeem'), ('a', 'Geannuleerd'), ('closure requested', 'Verzoek tot afhandeling'), ('sent', 'Verzonden naar extern systeem'), ('send failed', 'Verzending naar extern systeem mislukt'), ('done external', 'Melding is afgehandeld in extern systeem'), ('reopen requested', 'Verzoek tot heropenen')], default='m', help_text='Melding status', max_length=20)),
                ('extern', models.BooleanField(default=False, help_text='Wel of niet status extern weergeven')),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('_signal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statuses', to='signals.Signal')),
            ],
            options={
                'verbose_name_plural': 'Statuses',
                'ordering': ('created_at',),
                'permissions': (('push_to_sigmax', 'Doorsturen van een melding (THOR)'),),
                'get_latest_by': 'datetime',
            },
        ),
        migrations.CreateModel(
            name='SignalsPlan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('report_days', models.CharField(max_length=100)),
                ('schedule_datetime', models.DateTimeField(blank=True, null=True)),
                ('forman_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('reporter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='signals', to='signals.Reporter')),
                ('signal', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports', to='signals.Signal')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SignalsActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activity_id', models.CharField(blank=True, max_length=255, null=True)),
                ('to_app', models.CharField(max_length=255)),
                ('from_app', models.CharField(max_length=255)),
                ('signal_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='signals.Signal')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SignalCityObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('complainID', models.CharField(max_length=200)),
                ('complainIDall', models.CharField(max_length=200)),
                ('reportCount', models.CharField(max_length=200)),
                ('is_Orac', models.BooleanField(default=False)),
                ('city_obj', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='signals.CityObject')),
                ('signal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='signals.Signal')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='signal',
            name='status',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='signal', to='signals.Status'),
        ),
        migrations.CreateModel(
            name='ServiceLevelObjective',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('n_days', models.IntegerField()),
                ('use_calendar_days', models.BooleanField(choices=[(True, 'Kalender dagen'), (False, 'Werk dagen')], default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('created_by', models.EmailField(blank=True, max_length=254, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slo', to='signals.Category')),
            ],
        ),
        migrations.AddField(
            model_name='reporter',
            name='_signal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reporters', to='signals.Signal'),
        ),
        migrations.AddField(
            model_name='priority',
            name='_signal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='priorities', to='signals.Signal'),
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('text', models.TextField(max_length=3000)),
                ('created_by', models.EmailField(blank=True, max_length=254, null=True)),
                ('_signal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='signals.Signal')),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.AddField(
            model_name='location',
            name='_signal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='signals.Signal'),
        ),
        migrations.AddField(
            model_name='directingdepartments',
            name='_signal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='directing_departments', to='signals.Signal'),
        ),
        migrations.AddField(
            model_name='directingdepartments',
            name='departments',
            field=models.ManyToManyField(related_name='_directingdepartments_departments_+', to='signals.Department'),
        ),
        migrations.AddField(
            model_name='cityobjectassignment',
            name='_signal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='city_object_assignments', to='signals.Signal'),
        ),
        migrations.AddField(
            model_name='cityobjectassignment',
            name='city_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='city_object_assignments', to='signals.CityObject'),
        ),
        migrations.CreateModel(
            name='CategoryTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.EmailField(blank=True, max_length=254, null=True)),
                ('text', models.CharField(blank=True, max_length=10000, null=True)),
                ('new_category', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='signals.Category')),
                ('old_category', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='translations', to='signals.Category')),
            ],
            options={
                'verbose_name': 'categorie omzetting',
                'verbose_name_plural': 'categorie omzettingen',
            },
        ),
        migrations.CreateModel(
            name='CategoryQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='signals.Category')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='signals.Question')),
            ],
        ),
        migrations.CreateModel(
            name='CategoryDepartment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_responsible', models.BooleanField(default=False)),
                ('can_view', models.BooleanField(default=False)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='signals.Category')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='signals.Department')),
            ],
        ),
        migrations.AddField(
            model_name='categoryassignment',
            name='_signal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category_assignments', to='signals.Signal'),
        ),
        migrations.AddField(
            model_name='categoryassignment',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category_assignments', to='signals.Category'),
        ),
        migrations.AddField(
            model_name='category',
            name='city',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='signals.City'),
        ),
        migrations.AddField(
            model_name='category',
            name='country',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='signals.Country'),
        ),
        migrations.AddField(
            model_name='category',
            name='departments',
            field=models.ManyToManyField(through='signals.CategoryDepartment', to='signals.Department'),
        ),
        migrations.AddField(
            model_name='category',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='signals.Category'),
        ),
        migrations.AddField(
            model_name='category',
            name='questions',
            field=models.ManyToManyField(through='signals.CategoryQuestion', to='signals.Question'),
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.EmailField(blank=True, max_length=254, null=True)),
                ('file', models.FileField(max_length=255, upload_to='attachments/%Y/%m/%d/')),
                ('mimetype', models.CharField(max_length=30)),
                ('is_image', models.BooleanField(default=False)),
                ('is_issue_finish_image', models.BooleanField(default=False)),
                ('_signal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='signals.Signal')),
            ],
            options={
                'ordering': ('created_at',),
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('code', models.CharField(max_length=255)),
                ('geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='signals.AreaType')),
            ],
            options={
                'verbose_name': 'Gebied',
                'verbose_name_plural': 'Gebieden',
            },
        ),
        migrations.CreateModel(
            name='StatusMessageTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('state', models.CharField(choices=[('m', 'Gemeld'), ('i', 'In afwachting van behandeling'), ('h', 'On hold'), ('o', 'Afgehandeld'), ('s', 'Gesplitst'), ('reopened', 'Heropend'), ('b', 'In behandeling'), ('ingepland', 'Ingepland'), ('ready to send', 'Te verzenden naar extern systeem'), ('a', 'Geannuleerd'), ('closure requested', 'Verzoek tot afhandeling'), ('sent', 'Verzonden naar extern systeem'), ('send failed', 'Verzending naar extern systeem mislukt'), ('done external', 'Melding is afgehandeld in extern systeem'), ('reopen requested', 'Verzoek tot heropenen')], max_length=20)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('order', models.PositiveIntegerField(db_index=True, default=0)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='status_message_templates', to='signals.Category')),
            ],
            options={
                'verbose_name': 'Standaard afmeldtekst',
                'verbose_name_plural': 'Standaard afmeldteksten',
                'ordering': ('category', 'state', 'order'),
                'permissions': (('sia_statusmessagetemplate_write', 'Wijzingen van standaardteksten'),),
                'index_together': {('category', 'state', 'order')},
            },
        ),
        migrations.AddIndex(
            model_name='signal',
            index=models.Index(fields=['created_at'], name='signals_sig_created_b90766_idx'),
        ),
        migrations.AddIndex(
            model_name='signal',
            index=models.Index(fields=['id', 'parent'], name='signals_sig_id_09cd8a_idx'),
        ),
        migrations.AddIndex(
            model_name='note',
            index=models.Index(fields=['created_at'], name='signals_not_created_feb36f_idx'),
        ),
        migrations.AddIndex(
            model_name='department',
            index=models.Index(fields=['name'], name='signals_dep_name_78e3e6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='category',
            unique_together={('parent', 'slug')},
        ),
        migrations.AddIndex(
            model_name='attachment',
            index=models.Index(fields=['created_at'], name='signals_att_created_6ac134_idx'),
        ),
        migrations.AddIndex(
            model_name='attachment',
            index=models.Index(fields=['is_image'], name='signals_att_is_imag_2c4a8b_idx'),
        ),
        migrations.AddIndex(
            model_name='attachment',
            index=models.Index(fields=['_signal', 'is_image'], name='signals_att__signal_89a833_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='area',
            unique_together={('code', '_type')},
        ),
    ]
